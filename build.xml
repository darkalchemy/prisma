<?xml version="1.0" encoding="UTF-8"?>
<project name="webapp" default="noop">

    <target name="noop"/>
    <property environment="env"/>

    <tstamp>
        <format property="now" pattern="yyyy-MM-dd HH:mm:ss" locale="en,UK"/>
        <format property="now_num" pattern="yyyyMMddHHmmss" locale="en,UK"/>
        <format property="now_file" pattern="yyyy-MM-dd_HHmmss" locale="en,UK"/>
    </tstamp>

    <!-- By default, we assume all tools to be on the $PATH -->
    <condition property="ext" value=".bat" else="">
        <os family="windows"/>
    </condition>

    <target name="cc" description="Clear application cache">
        <echo>Clear cache</echo>
        <delete dir="${basedir}/tmp/cache/"/>
        <mkdir dir="${basedir}/tmp/cache"/>
        <chmod file="${basedir}/tmp/cache" perm="775"/>
        <delete dir="${basedir}/tmp/log/"/>
        <mkdir dir="${basedir}/tmp/log"/>
        <chmod file="${basedir}/tmp/log" perm="775"/>

        <delete includeemptydirs="true">
            <fileset dir="${basedir}/web/cache">
                <include name="**/*"/>
                <exclude name=".htaccess"/>
            </fileset>
        </delete>
    </target>

    <target name="lint">
        <apply executable="php" failonerror="true" verbose="true">
            <arg value="-l"/>
            <fileset dir="${basedir}">
                <include name="**/config/*.php"/>
                <include name="**/src/**/*.php"/>
                <exclude name="**/vendor/**"/>
                <modified/>
            </fileset>
        </apply>
    </target>

    <target name="serve" description="Start PHP server">
        <exec executable="php" searchpath="true" resolveexecutable="true" failonerror="true">
            <arg line="-S 0.0.0.0:8080 -t public public/index.php"/>
        </exec>
    </target>

    <target name="apigen" description="Generate API documentation using ApiGen">
        <delete dir="${basedir}/build/api"/>
        <mkdir dir="${basedir}/build/api"/>
        <exec executable="${basedir}/vendor/bin/apigen${ext}" searchpath="true" resolveexecutable="true"
              failonerror="true">
            <arg line="generate -s ${basedir}/src -d ${basedir}/build/api --exclude *.html.php,env.example.phps,env.php"/>
        </exec>
    </target>

    <target name="phpunit" description="Run unit tests with PHPUnit">
        <exec executable="${basedir}/vendor/bin/phpunit${ext}" searchpath="true" resolveexecutable="true"
              failonerror="true" taskname="phpunit">
            <arg value="--configuration"/>
            <arg path="${basedir}/phpunit.xml"/>
        </exec>
    </target>

    <target name="phpunit-coverage" description="Run unit tests with PHPUnit with coverage">
        <delete dir="${basedir}/build/coverage"/>
        <mkdir dir="${basedir}/build/coverage"/>
        <exec executable="${basedir}/vendor/bin/phpunit${ext}" searchpath="true" resolveexecutable="true"
              failonerror="true" taskname="phpunit-coverage">
            <arg value="--configuration"/>
            <arg path="${basedir}/phpunit.xml"/>
            <arg value="--coverage-clover"/>
            <arg path="${basedir}/build/logs/clover.xml"/>
            <arg value="--coverage-html"/>
            <arg path="${basedir}/build/coverage"/>
        </exec>
    </target>

    <target name="phpstan" description="PHP Static Analysis Tool - discover bugs in your code without running it">
        <mkdir dir="${basedir}/build"/>
        <get src="https://github.com/phpstan/phpstan/releases/download/0.9/phpstan.phar"
             dest="${basedir}/build/phpstan.phar" skipexisting="true"/>
        <exec executable="php" searchpath="true" resolveexecutable="true">
            <arg value="${basedir}/build/phpstan.phar"/>
            <arg value="analyse"/>
            <arg value="-l"/>
            <arg value="5"/>
            <arg value="-c"/>
            <arg path="${basedir}/phpstan.neon"/>
            <arg value="src"/>
            <arg value="tests"/>
            <arg value="--no-interaction"/>
            <arg value="--no-progress"/>
        </exec>
    </target>

    <target name="fix-style" description="Code style fixer">
        <mkdir dir="${basedir}/build"/>
        <get src="https://github.com/FriendsOfPHP/PHP-CS-Fixer/releases/download/v2.0.0/php-cs-fixer.phar"
             dest="${basedir}/build/php-cs-fixer.phar" skipexisting="true"/>
        <exec executable="php" searchpath="true" resolveexecutable="true">
            <arg value="${basedir}/build/php-cs-fixer.phar"/>
            <arg value="fix"/>
            <arg value="${basedir}/src/"/>
            <arg value="--rules=@PSR2"/>
            <arg value="--using-cache=no"/>
        </exec>
        <exec executable="php" searchpath="true" resolveexecutable="true">
            <arg value="${basedir}/build/php-cs-fixer.phar"/>
            <arg value="fix"/>
            <arg value="${basedir}/tests/"/>
            <arg value="--rules=@PSR2"/>
            <arg value="--using-cache=no"/>
        </exec>
    </target>

    <target name="check-doc" description="Docblock check">
        <exec executable="${basedir}/vendor/bin/phpdoccheck${ext}" searchpath="true" resolveexecutable="true" failonerror="true">
            <arg line="-d ${basedir}/src" />
        </exec>
    </target>

    <target name="parse-twig" description="Parse all Twig templates">
        <exec executable="php" searchpath="true" resolveexecutable="true">
            <arg value="${basedir}/bin/parse-twig.php"/>
        </exec>
    </target>

    <target name="check-all" depends="lint,phpstan,check-doc,phpunit" />

    <target name="build" depends="lint,phpunit">
        <!-- Load properties -->
        <property file="${basedir}/config/ant.properties"/>

        <!-- Get composer.phar if not existing -->
        <get src="https://getcomposer.org/composer.phar" dest="${basedir}/build/composer.phar" skipexisting="true"/>

        <!-- Delete build/master -->
        <delete dir="${basedir}/build/master"/>

        <!-- Get master branch from GitHub -->
        <exec executable="git" failonerror="true">
            <arg line="archive --format zip --output ${basedir}/build/master.zip master"/>
        </exec>

        <!-- Unzip master branch -->
        <unzip src="${basedir}/build/master.zip" dest="${basedir}/build/master/"/>

        <!-- Delete zipped master branch -->
        <delete file="${basedir}/build/master.zip"/>

        <!-- Install composer packages -->
        <exec executable="php" failonerror="true">
            <arg line="${basedir}/build/composer.phar install --no-dev --optimize-autoloader -d ${basedir}/build/master"/>
        </exec>

        <!-- Remove files which aren't needed on the server -->
        <delete>
            <fileset dir="${basedir}/build/master/config/" casesensitive="no">
                <include name="env.php"/>
                <include name="*.properties"/>
            </fileset>
        </delete>

        <delete>
            <fileset dir="${basedir}/build/master/" casesensitive="no">
                <include name="**/composer.json"/>
                <include name="**/composer.lock"/>
                <include name="**/phpunit.xml*"/>
                <include name="**/*.gitignore"/>
                <include name="**/*.codeclimate.yml"/>
                <include name="**/*.editorconfig*"/>
                <include name="**/*.styleci.yml"/>
                <include name="**/*.scrutinizer.yml"/>
                <include name="**/*.travis.yml"/>
                <include name="**/*.appveyor.yml"/>
                <include name="**/*.coveralls.yml"/>
                <include name="**/mkdocs.yml"/>
                <include name="**/phpstan.neon"/>
                <include name="**/appveyor.yml"/>
                <include name="**/build.xml"/>
                <include name="**/CHANGELOG.md"/>
                <include name="**/CONDUCT.md"/>
                <include name="**/LICENSE*"/>
                <include name="**/README*"/>
                <include name="**/CHANGES*"/>
                <include name="**/CONTRIBUTING*"/>
                <include name="**/UPGRADE*.md"/>
            </fileset>
        </delete>

        <!-- Remove folders which aren't needed on the server -->
        <delete includeemptydirs="true">
            <fileset dir="${basedir}/build/master/" casesensitive="no">
                <include name="**/tests/"/>
                <include name="**/test/"/>
                <include name="**/tester/"/>
                <include name="**/docs/"/>
                <include name="**/doc/"/>
                <include name="**/examples/"/>
                <include name="**/example/"/>
            </fileset>
        </delete>

        <!-- Zip master brunch -->
        <zip destfile="${basedir}/build/${build.filename}">
            <zipfileset dir="${basedir}/build/master"/>
        </zip>
    </target>

    <target name="deploy" depends="build" description="Build and deploy project">

        <!-- Chose between test, staging and prod environment -->
        <input message="Which config should be used?" validArgs="test, staging, prod" addproperty="config"/>

        <!-- Load properties -->
        <property file="${basedir}/config/ant.${config}.properties"/>

        <!-- Upload zip file-->
        <echo message="Uploading ${build.filename}"/>
        <scp file="${basedir}/build/${build.filename}"
             todir="${build.ftp.username}:${build.ftp.password}@${build.ftp.host}:${build.ftp.path}"
             trust="true"/>

        <!-- Upload deploy.php -->
        <echo message="Uploading deploy.php"/>
        <scp file="${basedir}/build/master/config/deploy.php"
             todir="${build.ftp.username}:${build.ftp.password}@${build.ftp.host}:${build.ftp.path}"
             trust="true"/>

        <!-- Execute deploy.php on the server -->
        <!-- sshexec requires JSch
          Download: https://netcologne.dl.sourceforge.net/project/jsch/jsch.jar/0.1.54/jsch-0.1.54.jar
          Copy jsch-0.1.54.jar to c:\xampp\ant\lib

          Run: sudo visudo
          Add this line at the end (change “username” to your username):
          username ALL=(ALL) NOPASSWD: ALL
        -->
        <sshexec host="${build.ftp.host}"
                 username="${build.ftp.username}"
                 password="${build.ftp.password}"
                 command="cd ${build.ftp.path};php deploy.php ${build.filename}"
                 trust="true"
        />

        <!-- Delete build/master -->
        <!--<delete dir="${basedir}/build/master"/>-->

        <!-- Delete zip file -->
        <!-- <delete file="${basedir}/build/${build.filename}"/> -->
    </target>

</project>
